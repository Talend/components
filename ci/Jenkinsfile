def nexusCredentials = usernamePassword(
	credentialsId: 'nexus-artifact-zl-credentials',
    usernameVariable: 'NEXUS_USER',
    passwordVariable: 'NEXUS_PASSWORD')

def gitCredentials = usernamePassword(
	credentialsId: 'github-credentials',
    usernameVariable: 'GITHUB_LOGIN',
    passwordVariable: 'GITHUB_TOKEN')

def dockerCredentials = usernamePassword(
	credentialsId: 'docker-registry-credentials',
    passwordVariable: 'DOCKER_PASSWORD',
    usernameVariable: 'DOCKER_LOGIN')

def artifactoryCredentials = usernamePassword(
  credentialsId: 'artifactory-datapwn-credentials',
    passwordVariable: 'ARTIFACTORY_PASSWORD',
    usernameVariable: 'ARTIFACTORY_LOGIN')

def branch = env.BRANCH_NAME
def repo = 'components'
def slackChannel = 'components-ci'
def escaped_branch = branch.toLowerCase().replaceAll("/", "_")    
def PRODUCTION_DEPLOYMENT_REPOSITORY = "snapshots"
def deploymentSuffix = (env.BRANCH_NAME == "master" || env.BRANCH_NAME.startsWith("maintenance/")) ? "${PRODUCTION_DEPLOYMENT_REPOSITORY}" : "dev_branch_snapshots/branch_${escaped_branch}"
def m2 = "/tmp/jenkins/tdi/m2/${deploymentSuffix}"
def podLabel = "components-${UUID.randomUUID().toString()}".take(53)

pipeline {
  agent {
        kubernetes {
            label podLabel
            yaml """
apiVersion: v1
kind: Pod
spec:
    containers:
        -
            name: main
            image: '${env.TSBI_IMAGE}'
            command: [cat]
            tty: true
            volumeMounts: [{name: docker, mountPath: /var/run/docker.sock}, {name: m2main, mountPath: /root/.m2/repository}, {name: dockercache, mountPath: /root/.dockercache}]
            resources: {requests: {memory: 3G, cpu: '2.5'}, limits: {memory: 3G, cpu: '2.5'}}
    volumes:
        -
            name: docker
            hostPath: {path: /var/run/docker.sock}
        -
            name: m2main
            hostPath: {path: ${m2} }
        -
            name: dockercache
            hostPath: {path: /tmp/jenkins/tdi/docker}
    imagePullSecrets:
        - name: talend-registry
"""
        }
    }

  environment {
    MAVEN_OPTS = "-Dmaven.artifact.threads=128 -Dorg.slf4j.simpleLogger.showThreadName=true -Dorg.slf4j.simpleLogger.showDateTime=true -Dorg.slf4j.simpleLogger.dateTimeFormat=HH:mm:ss -Dtalend.maven.decrypter.m2.location=${WORKSPACE}/.jenkins/"
    TALEND_REGISTRY_OLD = "registry.datapwn.com"
  }

  options {
    timeout(time: 120, unit: 'MINUTES')
    skipStagesAfterUnstable()
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
  }

  parameters {
    choice(name: 'Action',
            choices: ['STANDARD', 'RELEASE'],
            description: 'Kind of running : \nSTANDARD (default), normal building \nRELEASE : build release')
  }

  stages {

    stage('Compile | Test') {
      when {
        expression { params.Action == 'STANDARD' }
      }
      steps {
        withCredentials([gitCredentials, nexusCredentials, dockerCredentials, artifactoryCredentials]) {
          container('main') {
            sh "echo $DOCKER_PASSWORD | docker login ${TALEND_REGISTRY_OLD} -u $DOCKER_LOGIN --password-stdin"
            sh 'mvn clean -B -U -V install'
          }
        }
      }
    }

    stage('Compile | Test | Deploy') {
      when {
        expression { params.Action == 'RELEASE' }
      }
      steps {
        container('main') {
          sh """
              mvn clean -B -U -V -s ci/settings.xml deploy
            """
          // -Dgit_branch="${escaped_branch}" \
          // -Dbigquery.project="${bigquery_project}" \
          // -Dbigquery.service.account.file="${service_account_file}" \
          // -Dbigquery.gcp.temp.folder="${bigquery_gcp_temp_folder}" \
          // -Dorg.talend.components.google.drive.service_account_file="${google_drive_service_account_file}"
        }
      }
    }
  }

  post {
    success {
        slackSend(color: '#00FF00', message: "SUCCESSFUL: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
    }
    failure {
        slackSend(color: '#FF0000', message: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})", channel: "${slackChannel}")
    }
  }
}